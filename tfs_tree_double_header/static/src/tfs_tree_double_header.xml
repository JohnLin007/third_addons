<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

    <t t-inherit="web.ListRenderer" t-inherit-mode="extension" owl="1">
        <thead position="replace">
            <thead>
                <t t-if="double_header">
                    <tr style="text-align:center">
                        <th t-if="hasSelectors" rowspan="2" class="o_list_record_selector o_list_controller align-middle pe-1 cursor-pointer" tabindex="-1" t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)" t-on-click.stop="toggleSelection">
                            <CheckBox disabled="!!props.list.editedRecord or props.list.model.useSampleModel" value="selectAll" className="'d-flex'" onChange.bind="toggleSelection"/>
                        </th>
                        <t t-set="field_colspan" t-value="0"/>
                        <t t-foreach="state.columns" t-as="column" t-key="column.id">
                            <t t-if="column.options.colstring and column.options.colspan">
                                <t t-set="field_colspan" t-value="column.options.colspan"/>
                                <th t-att-colspan="column.options.colspan"><span t-esc="column.options.colstring"></span></th>
                            </t>
                            <t t-if="field_colspan > 0">
                                <t t-set="field_colspan" t-value="field_colspan-1"/>
                            </t>
                            <t t-else="">
                                <th rowspan="2" t-if="column.type === 'field'"
                                    t-att-data-name="column.name"
                                    t-att-class="getColumnClass(column) + ' opacity-trigger-hover'"
                                    t-on-mouseenter="ev => this.onHoverSortColumn(ev, column)"
                                    t-on-mouseleave="ev => this.onHoverSortColumn(ev, column)"
                                    t-on-mouseup="onColumnTitleMouseUp"
                                    t-on-click="() => this.onClickSortColumn(column)"
                                    t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)"
                                    t-att-data-tooltip-template="isDebugMode ? 'web.FieldTooltip' : false"
                                    t-att-data-tooltip-info="isDebugMode ? makeTooltip(column) : false"
                                    data-tooltip-delay="1000"
                                    tabindex="-1">
                                    <t t-if="column.hasLabel and column.widget !== 'handle'">
                                    <t t-set="isNumeric" t-value="isNumericColumn(column)"/>
                                        <div t-att-class="{'d-flex': true, 'flex-row-reverse': isNumeric}">
                                            <span class="d-block min-w-0 text-truncate flex-grow-1" t-att-class="isNumeric ? 'text-end' : ''"
                                                  t-esc="column.label"/>
                                            <i t-att-class="getSortableIconClass(column)"/>
                                        </div>
                                        <span t-if="!isEmpty"
                                              class="o_resize position-absolute top-0 end-0 bottom-0 ps-1 bg-black-25 opacity-0 opacity-50-hover z-index-1"
                                              t-on-mousedown.stop.prevent="onStartResize"/>
                                    </t>
                                </th>
                                <th rowspan="2" t-else="" t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)" t-att-class="{o_list_button: column.type === 'button_group'}"/>
                            </t>
                        </t>
                        <th rowspan="2" t-if="displayOptionalFields or activeActions.onDelete" t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)" class="o_list_controller o_list_actions_header" style="width: 32px; min-width: 32px">
                        <Dropdown t-if="displayOptionalFields"
                            class="'o_optional_columns_dropdown text-center border-top-0'"
                            togglerClass="'btn p-0'"
                            skipTogglerTabbing="true"
                            position="'bottom-end'">
                            <t t-set-slot="toggler">
                                <i class="o_optional_columns_dropdown_toggle oi oi-fw oi-settings-adjust"/>
                            </t>

                            <t t-foreach="getOptionalFields" t-as="field" t-key="field_index">
                                <DropdownItem parentClosingMode="'none'" onSelected="() => this.toggleOptionalField(field.name)">
                                    <CheckBox
                                        onChange="() => this.toggleOptionalField(field.name)"
                                        value="field.value"
                                        name="field.name"
                                    >
                                        <t t-esc="field.label"/> <t t-if="env.debug" t-esc="' (' + field.name + ')'" />
                                    </CheckBox>
                                </DropdownItem>
                            </t>
                        </Dropdown>
                    </th>
                    </tr>
                    <tr>
                        <t t-set="field_colspan" t-value="0"/>
                        <t t-foreach="state.columns" t-as="column" t-key="column.id">
                            <t t-if="column.options.colstring and column.options.colspan">
                                <t t-set="field_colspan" t-value="column.options.colspan"/>
                            </t>
                            <t t-if="field_colspan > 0">
                                <th t-if="column.type === 'field'"
                                    t-att-data-name="column.name"
                                    t-att-class="getColumnClass(column) + ' opacity-trigger-hover'"
                                    t-on-mouseenter="ev => this.onHoverSortColumn(ev, column)"
                                    t-on-mouseleave="ev => this.onHoverSortColumn(ev, column)"
                                    t-on-mouseup="onColumnTitleMouseUp"
                                    t-on-click="() => this.onClickSortColumn(column)"
                                    t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)"
                                    t-att-data-tooltip-template="isDebugMode ? 'web.FieldTooltip' : false"
                                    t-att-data-tooltip-info="isDebugMode ? makeTooltip(column) : false"
                                    data-tooltip-delay="1000"
                                    tabindex="-1">
                                    <t t-if="column.hasLabel and column.widget !== 'handle'">
                                    <t t-set="isNumeric" t-value="isNumericColumn(column)"/>
                                        <div t-att-class="{'d-flex': true, 'flex-row-reverse': isNumeric}">
                                            <span class="d-block min-w-0 text-truncate flex-grow-1" t-att-class="isNumeric ? 'text-end' : ''"
                                                  t-esc="column.label"/>
                                            <i t-att-class="getSortableIconClass(column)"/>
                                        </div>
                                        <span t-if="!isEmpty"
                                              class="o_resize position-absolute top-0 end-0 bottom-0 ps-1 bg-black-25 opacity-0 opacity-50-hover z-index-1"
                                              t-on-mousedown.stop.prevent="onStartResize"/>
                                    </t>
                                </th>
                                <th t-else="" t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)" t-att-class="{o_list_button: column.type === 'button_group'}"/>
                                <t t-set="field_colspan" t-value="field_colspan-1"/>
                            </t>
                        </t>
                    </tr>
                </t>
                <tr t-else="">
                    <th t-if="hasSelectors" class="o_list_record_selector o_list_controller align-middle pe-1 cursor-pointer" tabindex="-1" t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)" t-on-click.stop="toggleSelection">
                        <CheckBox disabled="!!props.list.editedRecord or props.list.model.useSampleModel" value="selectAll" className="'d-flex'" onChange.bind="toggleSelection"/>
                    </th>
                    <t t-foreach="state.columns" t-as="column" t-key="column.id">
                        <th t-if="column.type === 'field'"
                            t-att-data-name="column.name"
                            t-att-class="getColumnClass(column) + ' opacity-trigger-hover'"
                            t-on-mouseenter="ev => this.onHoverSortColumn(ev, column)"
                            t-on-mouseleave="ev => this.onHoverSortColumn(ev, column)"
                            t-on-mouseup="onColumnTitleMouseUp"
                            t-on-click="() => this.onClickSortColumn(column)"
                            t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)"
                            t-att-data-tooltip-template="isDebugMode ? 'web.FieldTooltip' : false"
                            t-att-data-tooltip-info="isDebugMode ? makeTooltip(column) : false"
                            data-tooltip-delay="1000"
                            tabindex="-1">
                            <t t-if="column.hasLabel and column.widget !== 'handle'">
                            <t t-set="isNumeric" t-value="isNumericColumn(column)"/>
                                <div t-att-class="{'d-flex': true, 'flex-row-reverse': isNumeric}">
                                    <span class="d-block min-w-0 text-truncate flex-grow-1" t-att-class="isNumeric ? 'text-end' : ''"
                                          t-esc="column.label"/>
                                    <i t-att-class="getSortableIconClass(column)"/>
                                </div>
                                <span t-if="!isEmpty"
                                      class="o_resize position-absolute top-0 end-0 bottom-0 ps-1 bg-black-25 opacity-0 opacity-50-hover z-index-1"
                                      t-on-mousedown.stop.prevent="onStartResize"/>
                            </t>
                        </th>
                        <th t-else="" t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)" t-att-class="{o_list_button: column.type === 'button_group'}"/>
                    </t>
                    <th t-if="displayOptionalFields or activeActions.onDelete" t-on-keydown.synthetic="(ev) => this.onCellKeydown(ev)" class="o_list_controller o_list_actions_header" style="width: 32px; min-width: 32px">
                        <Dropdown t-if="displayOptionalFields"
                            class="'o_optional_columns_dropdown text-center border-top-0'"
                            togglerClass="'btn p-0'"
                            skipTogglerTabbing="true"
                            position="'bottom-end'">
                            <t t-set-slot="toggler">
                                <i class="o_optional_columns_dropdown_toggle oi oi-fw oi-settings-adjust"/>
                            </t>

                            <t t-foreach="getOptionalFields" t-as="field" t-key="field_index">
                                <DropdownItem parentClosingMode="'none'" onSelected="() => this.toggleOptionalField(field.name)">
                                    <CheckBox
                                        onChange="() => this.toggleOptionalField(field.name)"
                                        value="field.value"
                                        name="field.name"
                                    >
                                        <t t-esc="field.label"/> <t t-if="env.debug" t-esc="' (' + field.name + ')'" />
                                    </CheckBox>
                                </DropdownItem>
                            </t>
                        </Dropdown>
                    </th>
                </tr>
            </thead>
        </thead>
    </t>

</templates>